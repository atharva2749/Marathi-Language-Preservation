import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from preprocessing import preprocess_image  # Ensure this import works
import os
import random
import sys  # ‚úÖ To force exit after one run

# ‚úÖ Load the trained CNN model
model = load_model("cnn_character_recognition.h5")

# ‚úÖ Load class labels
class_indices = {
    0: "‡§Ö", 1: "‡§Ü", 2: "‡§á", 3: "‡§à", 4: "‡§â", 5: "‡§ä", 6: "‡§ã", 7: "‡§è", 8: "‡§ê", 9: "‡§ì",
    10: "‡§î", 11: "‡§Ö‡§Ç", 12: "‡§Ö‡§É", 13: "‡§ï", 14: "‡§ñ", 15: "‡§ó", 16: "‡§ò", 17: "‡§ô",
    18: "‡§ö", 19: "‡§õ", 20: "‡§ú", 21: "‡§ù", 22: "‡§û", 23: "‡§ü", 24: "‡§†", 25: "‡§°", 26: "‡§¢",
    27: "‡§£", 28: "‡§§", 29: "‡§•", 30: "‡§¶", 31: "‡§ß", 32: "‡§®", 33: "‡§™", 34: "‡§´", 35: "‡§¨",
    36: "‡§≠", 37: "‡§Æ", 38: "‡§Ø", 39: "‡§∞", 40: "‡§≤", 41: "‡§µ", 42: "‡§∂", 43: "‡§∑", 44: "‡§∏",
    45: "‡§π", 46: "‡§≥", 47: "‡§ï‡•ç‡§∑", 48: "‡§ú‡•ç‡§û", 49: "‡•¶", 50: "‡•ß", 51: "‡•®", 52: "‡•©",
    53: "‡•™", 54: "‡•´", 55: "‡•¨", 56: "‡•≠", 57: "‡•Æ", 58: "‡•Ø"
}

# ‚úÖ Pick one random image (Only once)
dataset_path = "data/preprocessed/"
category = random.choice(["consonants", "vowels", "numerals"])
category_path = os.path.join(dataset_path, category)

subfolders = [f for f in os.listdir(category_path) if os.path.isdir(os.path.join(category_path, f))]
selected_subfolder = random.choice(subfolders)
subfolder_path = os.path.join(category_path, selected_subfolder)

images = [f for f in os.listdir(subfolder_path) if f.endswith(('.png', '.jpg', '.jpeg'))]
test_image_path = os.path.join(subfolder_path, random.choice(images))

# üîç Debugging: Print selected image path
print(f"üñº Selected Image: {test_image_path}")

# ‚úÖ Load the original image
original_img = cv2.imread(test_image_path)

# ‚úÖ Preprocess the image for prediction
input_image = preprocess_image(test_image_path)

if input_image is not None:
    input_image = np.expand_dims(input_image, axis=0)  # Add batch dimension

    print("‚öôÔ∏è Running Prediction...")

    # ‚úÖ Make a prediction
    prediction = model.predict(input_image)

    print("‚úÖ Prediction Completed!")

    # ‚úÖ Get the class with the highest probability
    predicted_class = np.argmax(prediction)
    predicted_character = class_indices.get(predicted_class, "Unknown")

    # ‚úÖ Print the predicted character
    print(f"üîç Predicted Character: {predicted_character}")

    # ‚úÖ Draw a green bounding box around the detected character
    height, width, _ = original_img.shape
    start_point = (5, 5)
    end_point = (width - 5, height - 5)
    color = (0, 255, 0)  # Green
    thickness = 3
    cv2.rectangle(original_img, start_point, end_point, color, thickness)

    # ‚úÖ Put predicted character on the image
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(original_img, predicted_character, (10, 40), font, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # ‚úÖ Show the image with prediction
    cv2.imshow("Predicted Character", original_img)
    cv2.waitKey(0)  # Wait for key press
    cv2.destroyAllWindows()  # Close the image window

    # ‚úÖ Exit script after displaying the result
    sys.exit()

else:
    print("‚ö†Ô∏è Error: Unable to process image.")
    sys.exit()
